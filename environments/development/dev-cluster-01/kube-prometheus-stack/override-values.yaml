kube-state-metrics:
  rbac:
    extraRules:
    - apiGroups: [ "autoscaling.k8s.io" ]
      resources: [ "verticalpodautoscalers" ]
      verbs: [ "list", "watch" ]
  tolerations:
  - key: "spot-workload"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"
  # Custom resources metrics for VPA
  customResourceState:
    enabled: true
    config:
      kind: CustomResourceStateMetrics
      spec:
        resources:
        - groupVersionKind:
            group: autoscaling.k8s.io
            kind: "VerticalPodAutoscaler"
            version: "v1"
          labelsFromPath:
            verticalpodautoscaler: [ metadata, name ]
            namespace: [ metadata, namespace ]
            target_api_version: [ apiVersion ]
            target_kind: [ spec, targetRef, kind ]
            target_name: [ spec, targetRef, name ]
          metrics:
          - name: "vpa_containerrecommendations_target"
            help: "VPA container recommendations for memory."
            each:
              type: Gauge
              gauge:
                path: [ status, recommendation, containerRecommendations ]
                valueFrom: [ target, memory ]
                labelsFromPath:
                  container: [ containerName ]
            commonLabels:
              resource: "memory"
              unit: "byte"
          - name: "vpa_containerrecommendations_target"
            help: "VPA container recommendations for cpu."
            each:
              type: Gauge
              gauge:
                path: [ status, recommendation, containerRecommendations ]
                valueFrom: [ target, cpu ]
                labelsFromPath:
                  container: [ containerName ]
            commonLabels:
              resource: "cpu"
              unit: "core"
  prometheus:
    monitor:
      enabled: true
      relabelings:
      - action: replace
        targetLabel: 'cluster'
        replacement: 'dev-cluster-01'
kubelet:
  serviceMonitor:
    relabelings:
    - action: replace
      sourceLabels: [ __metrics_path__ ]
      targetLabel: metrics_path
    - action: replace
      targetLabel: 'cluster'
      replacement: 'dev-cluster-01'
    cAdvisorRelabelings:
    - action: replace
      sourceLabels: [ __metrics_path__ ]
      targetLabel: metrics_path
    - action: replace
      targetLabel: 'cluster'
      replacement: 'dev-cluster-01'
    cAdvisorMetricRelabelings:
    - action: replace
      sourceLabels: [ __metrics_path__ ]
      targetLabel: metrics_path
    - action: replace
      targetLabel: 'cluster'
      replacement: 'dev-cluster-01'
    probesRelabelings:
    - action: replace
      sourceLabels: [ __metrics_path__ ]
      targetLabel: metrics_path
    - action: replace
      targetLabel: 'cluster'
      replacement: 'dev-cluster-01'
prometheus:
  prometheusSpec:
    retention: 90d #3 months
    externalUrl: "http://example.com/prometheus/"
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: standard-rwo
          accessModes: [ "ReadWriteOnce" ]
          resources:
            requests:
              storage: 150Gi
grafana:
  enabled: true
  persistence:
    enabled: true
    type: sts
    storageClassName: standard-rwo
    accessModes:
    - ReadWriteOnce
    size: 10Gi
    finalizers:
    - kubernetes.io/pvc-protection
  grafana.ini:
    server:
      domain: example.com
      protocol: http
      root_url: "%(protocol)s://%(domain)s/grafana/"
  sidecar:
    dashboards:
      multicluster:
        global:
          enabled: true
